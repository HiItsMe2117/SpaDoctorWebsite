<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blog Admin Dashboard - Spa Doctors</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .admin-header {
            background: #2563eb;
            color: white;
            padding: 1rem 0;
            margin-bottom: 2rem;
        }
        .admin-header .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .admin-header h1 {
            margin: 0;
            font-size: 1.5rem;
        }
        .admin-header .logout-btn {
            background: rgba(255,255,255,0.2);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.9rem;
        }
        .admin-header .logout-btn:hover {
            background: rgba(255,255,255,0.3);
        }
        .admin-dashboard {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }
        .dashboard-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .dashboard-card h3 {
            margin-top: 0;
            color: #2563eb;
        }
        .add-post-form {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
        }
        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 5px;
            font-size: 1rem;
            font-family: inherit;
        }
        .form-group textarea {
            min-height: 200px;
            resize: vertical;
        }
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        .btn-primary {
            background: #2563eb;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            transition: background 0.3s;
        }
        .btn-primary:hover {
            background: #1d4ed8;
        }
        .btn-primary:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }
        .posts-list {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .post-item {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .post-item:last-child {
            border-bottom: none;
        }
        .post-info h4 {
            margin: 0 0 0.5rem 0;
            color: #2563eb;
        }
        .post-info p {
            margin: 0;
            color: #64748b;
            font-size: 0.9rem;
        }
        .post-actions {
            display: flex;
            gap: 0.5rem;
        }
        .btn-danger {
            background: #dc2626;
            color: white;
            padding: 0.25rem 0.5rem;
            border: none;
            border-radius: 3px;
            font-size: 0.8rem;
            cursor: pointer;
        }
        .btn-danger:hover {
            background: #b91c1c;
        }
        .success-message,
        .error-message {
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
            display: none;
        }
        .success-message {
            background: #f0f9ff;
            color: #2563eb;
            border: 1px solid #bfdbfe;
        }
        .error-message {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="admin-header">
        <div class="container">
            <h1>üîß Blog Admin Dashboard</h1>
            <div>
                <span style="margin-right: 1rem;">Today's Code: <strong><%= todaysCode %></strong></span>
                <a href="/admin/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </div>

    <div class="admin-dashboard">
        <div class="dashboard-grid">
            <div class="dashboard-card">
                <h3>üìä Blog Statistics</h3>
                <p><strong>Total Posts:</strong> <%= posts.length %></p>
                <p><strong>Recent Activity:</strong> <%= posts.length > 0 ? 'Last post: ' + new Date(posts[0].date).toLocaleDateString() : 'No posts yet' %></p>
                <p><strong>Status:</strong> <span style="color: #059669;">Admin Panel Active</span></p>
            </div>
            <div class="dashboard-card">
                <h3>üîê Security Info</h3>
                <p><strong>Session:</strong> Expires in 30 minutes</p>
                <p><strong>Access Level:</strong> Full Admin</p>
                <p><strong>Daily Code:</strong> Regenerates at midnight</p>
            </div>
        </div>

        <div class="add-post-form" style="border: 2px solid #059669; background: #f0f9ff;">
            <h3>üöÄ Quick Start: Import Sample Posts</h3>
            <p style="color: #64748b; margin-bottom: 1.5rem;">
                Get your blog up and running instantly with 12 professional hot tub articles. 
                Perfect for SEO and establishing expertise!
            </p>
            
            <div class="bulk-import-actions" style="display: flex; gap: 1rem; margin-bottom: 1rem;">
                <button onclick="importSamplePosts()" class="btn-primary" id="importBtn">
                    üìö Import 12 Sample Posts
                </button>
                <button onclick="toggleBulkImport()" class="btn-primary" style="background: #64748b;">
                    üìÑ Custom Bulk Import
                </button>
            </div>

            <div id="customBulkImport" style="display: none;">
                <div class="form-group">
                    <label for="bulkJson">Paste JSON Array of Posts:</label>
                    <textarea id="bulkJson" rows="8" placeholder='[{"title": "Post Title", "content": "Post content..."}]' style="font-family: monospace; font-size: 0.9rem;"></textarea>
                </div>
                <button onclick="importCustomPosts()" class="btn-primary" id="customImportBtn">
                    Import Custom Posts
                </button>
            </div>
        </div>

        <div class="add-post-form">
            <h3>‚úçÔ∏è Add New Blog Post</h3>
            
            <div class="success-message" id="successMessage"></div>
            <div class="error-message" id="errorMessage"></div>

            <form id="addPostForm">
                <div class="form-group">
                    <label for="title">Article Title</label>
                    <input type="text" id="title" name="title" required 
                           placeholder="e.g., 5 Signs Your Hot Tub Needs Professional Repair">
                </div>
                <div class="form-group">
                    <label for="content">Article Content</label>
                    <textarea id="content" name="content" required 
                              placeholder="Write your hot tub tips, advice, or article content here...

Tips for writing great blog content:
‚Ä¢ Focus on helpful, practical advice
‚Ä¢ Use clear, simple language
‚Ä¢ Include specific examples
‚Ä¢ Break up text with bullet points
‚Ä¢ End with a call to action"></textarea>
                </div>
                <button type="submit" class="btn-primary" id="submitBtn">Publish Article</button>
            </form>
        </div>

        <div class="posts-list">
            <h3>üìù Published Posts</h3>
            <% if (posts && posts.length > 0) { %>
                <% posts.forEach((post, index) => { %>
                    <div class="post-item">
                        <div class="post-info">
                            <h4><%= post.title %></h4>
                            <p>Published <%= new Date(post.date).toLocaleDateString('en-US', { 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric' 
                            }) %></p>
                        </div>
                        <div class="post-actions">
                            <button class="btn-danger" onclick="deletePost(<%= post.id %>)">Delete</button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <p style="text-align: center; color: #64748b; padding: 2rem;">No blog posts yet. Create your first post above!</p>
            <% } %>
        </div>
    </div>

    <script>
        function showSuccess(message) {
            const successEl = document.getElementById('successMessage');
            successEl.textContent = message;
            successEl.style.display = 'block';
            document.getElementById('errorMessage').style.display = 'none';
        }

        function showError(message) {
            const errorEl = document.getElementById('errorMessage');
            errorEl.textContent = message;
            errorEl.style.display = 'block';
            document.getElementById('successMessage').style.display = 'none';
        }

        document.getElementById('addPostForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            const submitBtn = document.getElementById('submitBtn');
            
            if (!data.title.trim() || !data.content.trim()) {
                showError('Please fill in both title and content');
                return;
            }

            submitBtn.disabled = true;
            submitBtn.textContent = 'Publishing...';

            try {
                const response = await fetch('/admin/add-post', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('Blog post published successfully!');
                    this.reset();
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showError(result.error || 'Failed to publish blog post');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Publish Article';
            }
        });

        async function deletePost(postId) {
            if (!confirm('Are you sure you want to delete this blog post?')) {
                return;
            }

            try {
                const response = await fetch('/admin/delete-post', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ postId })
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('Blog post deleted successfully!');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showError(result.error || 'Failed to delete blog post');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            }
        }

        // Bulk import functionality
        function toggleBulkImport() {
            const customSection = document.getElementById('customBulkImport');
            customSection.style.display = customSection.style.display === 'none' ? 'block' : 'none';
        }

        async function importSamplePosts() {
            if (!confirm('This will import 12 sample blog posts. Continue?')) {
                return;
            }

            const importBtn = document.getElementById('importBtn');
            importBtn.disabled = true;
            importBtn.textContent = 'Importing...';

            try {
                const response = await fetch('/admin/import-sample-posts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`Successfully imported ${result.count} blog posts!`);
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showError(result.error || 'Failed to import posts');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            } finally {
                importBtn.disabled = false;
                importBtn.textContent = 'üìö Import 12 Sample Posts';
            }
        }

        async function importCustomPosts() {
            const jsonText = document.getElementById('bulkJson').value.trim();
            
            if (!jsonText) {
                showError('Please paste JSON data for import');
                return;
            }

            let posts;
            try {
                posts = JSON.parse(jsonText);
                if (!Array.isArray(posts)) {
                    throw new Error('Data must be an array of posts');
                }
            } catch (error) {
                showError('Invalid JSON format. Please check your data.');
                return;
            }

            if (!confirm(`This will import ${posts.length} posts. Continue?`)) {
                return;
            }

            const importBtn = document.getElementById('customImportBtn');
            importBtn.disabled = true;
            importBtn.textContent = 'Importing...';

            try {
                const response = await fetch('/admin/bulk-import', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ posts })
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(`Successfully imported ${result.count} blog posts!`);
                    document.getElementById('bulkJson').value = '';
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showError(result.error || 'Failed to import posts');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            } finally {
                importBtn.disabled = false;
                importBtn.textContent = 'Import Custom Posts';
            }
        }

        // Auto-save warning
        window.addEventListener('beforeunload', function(e) {
            const title = document.getElementById('title').value;
            const content = document.getElementById('content').value;
            if (title.trim() || content.trim()) {
                e.preventDefault();
                e.returnValue = '';
            }
        });
    </script>
</body>
</html>