<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blog Admin Dashboard - Spa Doctors</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .admin-header {
            background: #2563eb;
            color: white;
            padding: 1rem 0;
            margin-bottom: 2rem;
        }
        .admin-header .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .admin-header h1 {
            margin: 0;
            font-size: 1.5rem;
        }
        .admin-header .logout-btn {
            background: rgba(255,255,255,0.2);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.9rem;
        }
        .admin-header .logout-btn:hover {
            background: rgba(255,255,255,0.3);
        }
        .admin-dashboard {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }
        .dashboard-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .dashboard-card h3 {
            margin-top: 0;
            color: #2563eb;
        }
        .add-post-form {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
        }
        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 5px;
            font-size: 1rem;
            font-family: inherit;
        }
        .form-group textarea {
            min-height: 200px;
            resize: vertical;
        }
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        .btn-primary {
            background: #2563eb;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            transition: background 0.3s;
        }
        .btn-primary:hover {
            background: #1d4ed8;
        }
        .btn-primary:disabled {
            background: #9ca3af;
            cursor: not-allowed;
        }
        .posts-list {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .post-item {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .post-item:last-child {
            border-bottom: none;
        }
        .post-info h4 {
            margin: 0 0 0.5rem 0;
            color: #2563eb;
        }
        .post-info p {
            margin: 0;
            color: #64748b;
            font-size: 0.9rem;
        }
        .post-actions {
            display: flex;
            gap: 0.5rem;
        }
        .btn-danger {
            background: #dc2626;
            color: white;
            padding: 0.25rem 0.5rem;
            border: none;
            border-radius: 3px;
            font-size: 0.8rem;
            cursor: pointer;
        }
        .btn-danger:hover {
            background: #b91c1c;
        }
        .success-message,
        .error-message {
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
            display: none;
        }
        .success-message {
            background: #f0f9ff;
            color: #2563eb;
            border: 1px solid #bfdbfe;
        }
        .error-message {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="admin-header">
        <div class="container">
            <h1>üîß Blog Admin Dashboard</h1>
            <div style="display: flex; align-items: center; gap: 1rem;">
                <a href="/dashboard" style="background: rgba(255,255,255,0.2); color: white; padding: 0.5rem 1rem; border-radius: 5px; text-decoration: none; font-size: 0.9rem;">üìä Dashboard & Uploads</a>
                <span id="sessionTimer">Session: Loading...</span>
                <a href="/admin/logout" class="logout-btn">Logout</a>
            </div>
        </div>
    </div>

    <div class="admin-dashboard">
        <div class="dashboard-grid">
            <div class="dashboard-card">
                <h3>üìä Blog Statistics</h3>
                <p><strong>Total Posts:</strong> <%= posts.length %></p>
                <p><strong>Recent Activity:</strong> <%= posts.length > 0 ? 'Last post: ' + new Date(posts[0].date).toLocaleDateString() : 'No posts yet' %></p>
                <p><strong>Status:</strong> <span style="color: #059669;">Admin Panel Active</span></p>
            </div>
            <div class="dashboard-card">
                <h3>üîê Security Info</h3>
                <p><strong>Session:</strong> Expires in 30 minutes</p>
                <p><strong>Access Level:</strong> Full Admin</p>
                <p><strong>Daily Code:</strong> Regenerates at midnight</p>
            </div>
        </div>

        <div class="add-post-form" style="border: 2px solid #059669; background: #f0f9ff;">
            <h3>üöÄ Quick Start: Import Sample Posts</h3>
            <p style="color: #64748b; margin-bottom: 1.5rem;">
                Get your blog up and running instantly with 12 professional hot tub articles. 
                Perfect for SEO and establishing expertise!
            </p>
            
            <div class="bulk-import-actions" style="display: flex; gap: 1rem; margin-bottom: 1rem;">
                <button onclick="importSamplePosts()" class="btn-primary" id="importBtn">
                    üìö Import 12 Sample Posts
                </button>
                <button onclick="toggleBulkImport()" class="btn-primary" style="background: #64748b;">
                    üìÑ Custom Bulk Import
                </button>
            </div>

            <div id="customBulkImport" style="display: none;">
                <div class="form-group">
                    <label for="bulkJson">Paste JSON Array of Posts:</label>
                    <textarea id="bulkJson" rows="8" placeholder='[{"title": "Post Title", "content": "Post content..."}]' style="font-family: monospace; font-size: 0.9rem;"></textarea>
                </div>
                <button onclick="importCustomPosts()" class="btn-primary" id="customImportBtn">
                    Import Custom Posts
                </button>
            </div>
        </div>

        <div class="add-post-form">
            <h3>‚úçÔ∏è Add New Blog Post</h3>
            
            <div class="success-message" id="successMessage"></div>
            <div class="error-message" id="errorMessage"></div>

            <form id="addPostForm">
                <div class="form-group">
                    <label for="title">Article Title</label>
                    <input type="text" id="title" name="title" required 
                           placeholder="e.g., 5 Signs Your Hot Tub Needs Professional Repair">
                </div>
                <div class="form-group">
                    <label for="content">Article Content</label>
                    <textarea id="content" name="content" required 
                              placeholder="Write your hot tub tips, advice, or article content here...

Tips for writing great blog content:
‚Ä¢ Focus on helpful, practical advice
‚Ä¢ Use clear, simple language
‚Ä¢ Include specific examples
‚Ä¢ Break up text with bullet points
‚Ä¢ End with a call to action"></textarea>
                </div>
                <button type="submit" class="btn-primary" id="submitBtn">Publish Article</button>
            </form>
        </div>

        <div class="posts-list">
            <h3>üìù Published Posts</h3>
            <% if (posts && posts.length > 0) { %>
                <% posts.forEach((post, index) => { %>
                    <div class="post-item">
                        <div class="post-info">
                            <h4><%= post.title %></h4>
                            <p>Published <%= new Date(post.date).toLocaleDateString('en-US', { 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric' 
                            }) %></p>
                        </div>
                        <div class="post-actions">
                            <button class="btn-primary" onclick="editPost(<%= post.id %>)" style="padding: 0.25rem 0.5rem; font-size: 0.8rem; margin-right: 0.5rem;">Edit</button>
                            <button class="btn-danger" onclick="deletePost(<%= post.id %>)">Delete</button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <p style="text-align: center; color: #64748b; padding: 2rem;">No blog posts yet. Create your first post above!</p>
            <% } %>
        </div>
    </div>

    <!-- Edit Post Modal -->
    <div id="editModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
        <div style="background: white; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.3); max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto;">
            <h3 style="margin: 0 0 1.5rem 0; color: #2563eb;">‚úèÔ∏è Edit Blog Post</h3>
            
            <div class="success-message" id="editSuccessMessage" style="display: none;"></div>
            <div class="error-message" id="editErrorMessage" style="display: none;"></div>
            
            <form id="editPostForm">
                <input type="hidden" id="editPostId" name="id">
                <div class="form-group">
                    <label for="editTitle">Article Title</label>
                    <input type="text" id="editTitle" name="title" required>
                </div>
                <div class="form-group">
                    <label for="editContent">Article Content</label>
                    <textarea id="editContent" name="content" required style="min-height: 200px;"></textarea>
                </div>
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 1.5rem;">
                    <button type="button" onclick="closeEditModal()" style="background: #6b7280; color: white; padding: 0.5rem 1rem; border: none; border-radius: 5px; cursor: pointer;">Cancel</button>
                    <button type="submit" class="btn-primary" id="editSubmitBtn">Update Post</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Session Warning Modal -->
    <div id="sessionWarningModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
        <div style="background: white; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.3); max-width: 400px; text-align: center;">
            <h3 style="margin: 0 0 1rem 0; color: #dc2626;">‚ö†Ô∏è Session Expiring Soon</h3>
            <p id="sessionWarningMessage" style="margin: 0 0 1.5rem 0; color: #374151;"></p>
            <div style="display: flex; gap: 1rem; justify-content: center;">
                <button onclick="extendSession()" style="background: #2563eb; color: white; padding: 0.5rem 1rem; border: none; border-radius: 5px; cursor: pointer;">Stay Logged In</button>
                <button onclick="logout()" style="background: #dc2626; color: white; padding: 0.5rem 1rem; border: none; border-radius: 5px; cursor: pointer;">Logout</button>
            </div>
        </div>
    </div>

    <script>
        // Session Management System
        class SessionManager {
            constructor() {
                this.sessionDuration = 30 * 60 * 1000; // 30 minutes in milliseconds
                this.warningTimes = [5 * 60 * 1000, 1 * 60 * 1000]; // 5 and 1 minute warnings
                this.warningsShown = new Set();
                this.timerInterval = null;
                this.startTime = Date.now();
                this.lastActivity = Date.now();
                this.isActive = true;
                
                this.init();
            }
            
            init() {
                this.updateSessionTimer();
                this.startTimer();
                this.trackActivity();
            }
            
            startTimer() {
                this.timerInterval = setInterval(() => {
                    this.updateSessionTimer();
                    this.checkWarnings();
                }, 1000);
            }
            
            updateSessionTimer() {
                const elapsed = Date.now() - this.startTime;
                const remaining = this.sessionDuration - elapsed;
                const timerElement = document.getElementById('sessionTimer');
                
                if (remaining <= 0) {
                    this.handleSessionExpired();
                    return;
                }
                
                const minutes = Math.floor(remaining / 60000);
                const seconds = Math.floor((remaining % 60000) / 1000);
                
                let statusColor = '#059669'; // green
                if (remaining <= 5 * 60 * 1000) statusColor = '#dc2626'; // red
                else if (remaining <= 10 * 60 * 1000) statusColor = '#f59e0b'; // yellow
                
                timerElement.innerHTML = `<span style="color: ${statusColor};">Session: ${minutes}:${seconds.toString().padStart(2, '0')}</span>`;
            }
            
            checkWarnings() {
                const elapsed = Date.now() - this.startTime;
                const remaining = this.sessionDuration - elapsed;
                
                // Auto-refresh token if user is active and session is about to expire
                const timeSinceActivity = Date.now() - this.lastActivity;
                if (remaining <= 2 * 60 * 1000 && timeSinceActivity < 5 * 60 * 1000) { // 2 minutes remaining, activity within 5 minutes
                    this.autoRefreshToken();
                }
                
                this.warningTimes.forEach(warningTime => {
                    if (remaining <= warningTime && !this.warningsShown.has(warningTime)) {
                        this.showWarning(warningTime);
                        this.warningsShown.add(warningTime);
                    }
                });
            }
            
            async autoRefreshToken() {
                // Prevent multiple simultaneous refresh attempts
                if (this.refreshing) return;
                this.refreshing = true;
                
                try {
                    const response = await fetch('/admin/refresh-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (response.ok) {
                        // Reset session timer
                        this.startTime = Date.now();
                        this.warningsShown.clear();
                        
                        // Show subtle notification
                        const timerElement = document.getElementById('sessionTimer');
                        const originalContent = timerElement.innerHTML;
                        timerElement.innerHTML = '<span style="color: #059669;">Session Extended ‚úì</span>';
                        setTimeout(() => {
                            // Content will be updated by the regular timer
                        }, 2000);
                        
                    } else if (response.status === 401) {
                        // Session expired, show normal expiration flow
                        this.handleSessionExpired();
                    }
                } catch (error) {
                    // Network error, continue with normal warnings
                } finally {
                    this.refreshing = false;
                }
            }
            
            showWarning(warningTime) {
                const minutes = Math.floor(warningTime / 60000);
                const modal = document.getElementById('sessionWarningModal');
                const message = document.getElementById('sessionWarningMessage');
                
                message.textContent = `Your session will expire in ${minutes} minute${minutes !== 1 ? 's' : ''}. Any unsaved work will be lost.`;
                modal.style.display = 'flex';
                
                // Auto-hide after 10 seconds if not interacted with
                setTimeout(() => {
                    if (modal.style.display === 'flex') {
                        modal.style.display = 'none';
                    }
                }, 10000);
            }
            
            handleSessionExpired() {
                clearInterval(this.timerInterval);
                this.isActive = false;
                
                // Show expiration message
                const modal = document.getElementById('sessionWarningModal');
                const message = document.getElementById('sessionWarningMessage');
                message.textContent = 'Your session has expired. You will be redirected to the login page.';
                modal.style.display = 'flex';
                
                // Redirect after 3 seconds
                setTimeout(() => {
                    window.location.href = '/admin/login';
                }, 3000);
            }
            
            trackActivity() {
                const events = ['click', 'keypress', 'scroll', 'mousemove'];
                events.forEach(event => {
                    document.addEventListener(event, () => {
                        this.lastActivity = Date.now();
                    });
                });
            }
            
            async extendSession() {
                try {
                    // Call the token refresh endpoint
                    const response = await fetch('/admin/refresh-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        // Reset session timer with new token
                        this.startTime = Date.now();
                        this.warningsShown.clear();
                        document.getElementById('sessionWarningModal').style.display = 'none';
                        
                        // Show success message
                        showSuccess('Session extended successfully!');
                        setTimeout(() => {
                            document.getElementById('successMessage').style.display = 'none';
                        }, 3000);
                        
                    } else if (response.status === 401) {
                        // Session already expired
                        this.handleSessionExpired();
                    } else {
                        // Other error
                        showError('Failed to extend session. Please try again.');
                    }
                } catch (error) {
                    // Network error
                    showError('Connection error. Please check your internet connection.');
                }
            }
        }
        
        // Enhanced AJAX wrapper with session handling
        async function secureAjaxRequest(url, options = {}) {
            try {
                const response = await fetch(url, options);
                
                if (response.status === 401) {
                    // Session expired
                    showError('Your session has expired. Redirecting to login...');
                    setTimeout(() => {
                        window.location.href = '/admin/login?returnTo=' + encodeURIComponent(window.location.pathname);
                    }, 2000);
                    return null;
                }
                
                return response;
            } catch (error) {
                showError('Connection error. Please check your internet connection and try again.');
                return null;
            }
        }
        
        // Global functions for modal actions
        function extendSession() {
            sessionManager.extendSession();
        }
        
        function logout() {
            window.location.href = '/admin/logout';
        }
        
        // Initialize session manager
        const sessionManager = new SessionManager();
        
        // Auto-save functionality
        class AutoSaveManager {
            constructor() {
                this.saveInterval = 30000; // 30 seconds
                this.timers = new Map();
                this.init();
            }
            
            init() {
                // Set up auto-save for new post form
                this.setupAutoSave('title', 'content', 'newPost');
                
                // Set up auto-save for edit form (will be activated when edit modal opens)
                this.setupAutoSave('editTitle', 'editContent', 'editPost');
            }
            
            setupAutoSave(titleId, contentId, storageKey) {
                const titleInput = document.getElementById(titleId);
                const contentInput = document.getElementById(contentId);
                
                if (!titleInput || !contentInput) return;
                
                // Load saved data
                this.loadSavedData(titleId, contentId, storageKey);
                
                // Set up auto-save triggers
                const saveData = () => {
                    const data = {
                        title: titleInput.value,
                        content: contentInput.value,
                        timestamp: Date.now()
                    };
                    
                    if (data.title.trim() || data.content.trim()) {
                        localStorage.setItem(`autoSave_${storageKey}`, JSON.stringify(data));
                        this.showAutoSaveIndicator(storageKey);
                    }
                };
                
                // Save on input with debouncing
                [titleInput, contentInput].forEach(input => {
                    input.addEventListener('input', () => {
                        // Clear existing timer
                        if (this.timers.has(storageKey)) {
                            clearTimeout(this.timers.get(storageKey));
                        }
                        
                        // Set new timer
                        const timer = setTimeout(saveData, 2000); // 2 second delay
                        this.timers.set(storageKey, timer);
                    });
                });
                
                // Save on focus out
                [titleInput, contentInput].forEach(input => {
                    input.addEventListener('blur', saveData);
                });
            }
            
            loadSavedData(titleId, contentId, storageKey) {
                const savedData = localStorage.getItem(`autoSave_${storageKey}`);
                if (savedData) {
                    try {
                        const data = JSON.parse(savedData);
                        const age = Date.now() - data.timestamp;
                        
                        // Only restore if data is less than 24 hours old
                        if (age < 24 * 60 * 60 * 1000) {
                            const titleInput = document.getElementById(titleId);
                            const contentInput = document.getElementById(contentId);
                            
                            if (data.title && !titleInput.value) {
                                titleInput.value = data.title;
                            }
                            if (data.content && !contentInput.value) {
                                contentInput.value = data.content;
                            }
                            
                            if (data.title || data.content) {
                                this.showRestoredDataMessage(storageKey);
                            }
                        }
                    } catch (error) {
                        // Invalid saved data, remove it
                        localStorage.removeItem(`autoSave_${storageKey}`);
                    }
                }
            }
            
            showAutoSaveIndicator(storageKey) {
                const indicator = document.getElementById(`autoSaveIndicator_${storageKey}`) || this.createAutoSaveIndicator(storageKey);
                indicator.textContent = 'Auto-saved ‚úì';
                indicator.style.color = '#059669';
                indicator.style.opacity = '1';
                
                setTimeout(() => {
                    indicator.style.opacity = '0.5';
                }, 2000);
            }
            
            createAutoSaveIndicator(storageKey) {
                const indicator = document.createElement('span');
                indicator.id = `autoSaveIndicator_${storageKey}`;
                indicator.style.cssText = 'font-size: 0.8rem; color: #059669; opacity: 0.5; margin-left: 0.5rem;';
                
                if (storageKey === 'newPost') {
                    const form = document.querySelector('.add-post-form h3');
                    if (form) form.appendChild(indicator);
                } else if (storageKey === 'editPost') {
                    const form = document.querySelector('#editModal h3');
                    if (form) form.appendChild(indicator);
                }
                
                return indicator;
            }
            
            showRestoredDataMessage(storageKey) {
                const message = storageKey === 'newPost' ? 
                    'Draft restored from auto-save' : 
                    'Changes restored from auto-save';
                
                if (storageKey === 'newPost') {
                    showSuccess(message);
                } else {
                    showEditSuccess(message);
                }
                
                setTimeout(() => {
                    document.getElementById('successMessage').style.display = 'none';
                    document.getElementById('editSuccessMessage').style.display = 'none';
                }, 5000);
            }
            
            clearSavedData(storageKey) {
                localStorage.removeItem(`autoSave_${storageKey}`);
                const indicator = document.getElementById(`autoSaveIndicator_${storageKey}`);
                if (indicator) {
                    indicator.remove();
                }
            }
        }
        
        // Initialize auto-save manager
        const autoSaveManager = new AutoSaveManager();

        function showSuccess(message) {
            const successEl = document.getElementById('successMessage');
            successEl.textContent = message;
            successEl.style.display = 'block';
            document.getElementById('errorMessage').style.display = 'none';
        }

        function showError(message) {
            const errorEl = document.getElementById('errorMessage');
            errorEl.textContent = message;
            errorEl.style.display = 'block';
            document.getElementById('successMessage').style.display = 'none';
        }

        document.getElementById('addPostForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            const submitBtn = document.getElementById('submitBtn');
            
            if (!data.title.trim() || !data.content.trim()) {
                showError('Please fill in both title and content');
                return;
            }

            submitBtn.disabled = true;
            submitBtn.textContent = 'Publishing...';

            try {
                const response = await secureAjaxRequest('/admin/add-post', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                if (!response) return; // Session expired or network error
                const result = await response.json();

                if (result.success) {
                    showSuccess('Blog post published successfully!');
                    autoSaveManager.clearSavedData('newPost');
                    this.reset();
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showError(result.error || 'Failed to publish blog post');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Publish Article';
            }
        });

        async function deletePost(postId) {
            if (!confirm('Are you sure you want to delete this blog post?')) {
                return;
            }

            try {
                const response = await secureAjaxRequest('/admin/delete-post', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ postId })
                });

                if (!response) return; // Session expired or network error
                const result = await response.json();

                if (result.success) {
                    showSuccess('Blog post deleted successfully!');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showError(result.error || 'Failed to delete blog post');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            }
        }

        // Bulk import functionality
        function toggleBulkImport() {
            const customSection = document.getElementById('customBulkImport');
            customSection.style.display = customSection.style.display === 'none' ? 'block' : 'none';
        }

        async function importSamplePosts() {
            if (!confirm('This will import 12 sample blog posts. Continue?')) {
                return;
            }

            const importBtn = document.getElementById('importBtn');
            importBtn.disabled = true;
            importBtn.textContent = 'Importing...';

            try {
                const response = await secureAjaxRequest('/admin/import-sample-posts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (!response) return; // Session expired or network error
                const result = await response.json();

                if (result.success) {
                    showSuccess(`Successfully imported ${result.count} blog posts!`);
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showError(result.error || 'Failed to import posts');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            } finally {
                importBtn.disabled = false;
                importBtn.textContent = 'üìö Import 12 Sample Posts';
            }
        }

        async function importCustomPosts() {
            const jsonText = document.getElementById('bulkJson').value.trim();
            
            if (!jsonText) {
                showError('Please paste JSON data for import');
                return;
            }

            let posts;
            try {
                posts = JSON.parse(jsonText);
                if (!Array.isArray(posts)) {
                    throw new Error('Data must be an array of posts');
                }
            } catch (error) {
                showError('Invalid JSON format. Please check your data.');
                return;
            }

            if (!confirm(`This will import ${posts.length} posts. Continue?`)) {
                return;
            }

            const importBtn = document.getElementById('customImportBtn');
            importBtn.disabled = true;
            importBtn.textContent = 'Importing...';

            try {
                const response = await secureAjaxRequest('/admin/bulk-import', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ posts })
                });

                if (!response) return; // Session expired or network error
                const result = await response.json();

                if (result.success) {
                    showSuccess(`Successfully imported ${result.count} blog posts!`);
                    document.getElementById('bulkJson').value = '';
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showError(result.error || 'Failed to import posts');
                }
            } catch (error) {
                showError('Connection error. Please try again.');
            } finally {
                importBtn.disabled = false;
                importBtn.textContent = 'Import Custom Posts';
            }
        }

        // Edit post functionality
        function editPost(postId) {
            // Find the post data
            const posts = <%-JSON.stringify(posts)%>;
            const post = posts.find(p => p.id === postId);
            
            if (!post) {
                showError('Post not found');
                return;
            }
            
            // Populate the edit form
            document.getElementById('editPostId').value = post.id;
            document.getElementById('editTitle').value = post.title;
            document.getElementById('editContent').value = post.content;
            
            // Show the modal
            document.getElementById('editModal').style.display = 'flex';
        }
        
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
            document.getElementById('editPostForm').reset();
            document.getElementById('editSuccessMessage').style.display = 'none';
            document.getElementById('editErrorMessage').style.display = 'none';
        }
        
        function showEditSuccess(message) {
            const successEl = document.getElementById('editSuccessMessage');
            successEl.textContent = message;
            successEl.style.display = 'block';
            document.getElementById('editErrorMessage').style.display = 'none';
        }
        
        function showEditError(message) {
            const errorEl = document.getElementById('editErrorMessage');
            errorEl.textContent = message;
            errorEl.style.display = 'block';
            document.getElementById('editSuccessMessage').style.display = 'none';
        }
        
        // Edit post form submission
        document.getElementById('editPostForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            const submitBtn = document.getElementById('editSubmitBtn');
            
            if (!data.title.trim() || !data.content.trim()) {
                showEditError('Please fill in both title and content');
                return;
            }
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'Updating...';
            
            try {
                const response = await secureAjaxRequest('/admin/edit-post', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                if (!response) return; // Session expired or network error
                const result = await response.json();
                
                if (result.success) {
                    showEditSuccess('Blog post updated successfully!');
                    autoSaveManager.clearSavedData('editPost');
                    setTimeout(() => {
                        closeEditModal();
                        window.location.reload();
                    }, 1500);
                } else {
                    showEditError(result.error || 'Failed to update blog post');
                }
            } catch (error) {
                showEditError('Connection error. Please try again.');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Update Post';
            }
        });

        // Auto-save warning
        window.addEventListener('beforeunload', function(e) {
            const title = document.getElementById('title').value;
            const content = document.getElementById('content').value;
            const editTitle = document.getElementById('editTitle').value;
            const editContent = document.getElementById('editContent').value;
            
            if (title.trim() || content.trim() || editTitle.trim() || editContent.trim()) {
                e.preventDefault();
                e.returnValue = '';
            }
        });
    </script>
</body>
</html>